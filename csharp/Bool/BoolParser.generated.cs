// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  TTB-GN04
// DateTime: 2013.02.24. 13:53:07
// UserName: gn
// Input file <parser.y - 2013.02.24. 13:51:22>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Bool
{
public enum Tokens {
    error=1,EOF=2,TOKEN_VAR=3,TOKEN_AND=4,TOKEN_OR=5,TOKEN_NOT=6,
    TOKEN_LPAREN=7,TOKEN_RPAREN=8,UNOT=9};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<Expression,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public Expression yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Expression val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public partial class BoolParser: ShiftReduceParser<Expression, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[8];
  private static State[] states = new State[14];
  private static string[] nonTerms = new string[] {
      "input", "$accept", "expr", };

  static BoolParser() {
    states[0] = new State(new int[]{3,8,6,9,7,11},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,4,5,6,2,-2});
    states[4] = new State(new int[]{3,8,6,9,7,11},new int[]{-3,5});
    states[5] = new State(-4);
    states[6] = new State(new int[]{3,8,6,9,7,11},new int[]{-3,7});
    states[7] = new State(new int[]{4,4,5,-5,2,-5,8,-5});
    states[8] = new State(-3);
    states[9] = new State(new int[]{3,8,6,9,7,11},new int[]{-3,10});
    states[10] = new State(-6);
    states[11] = new State(new int[]{3,8,6,9,7,11},new int[]{-3,12});
    states[12] = new State(new int[]{8,13,4,4,5,6});
    states[13] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{3});
    rules[4] = new Rule(-3, new int[]{-3,4,-3});
    rules[5] = new Rule(-3, new int[]{-3,5,-3});
    rules[6] = new Rule(-3, new int[]{6,-3});
    rules[7] = new Rule(-3, new int[]{7,-3,8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // input -> expr
#line 25 "parser.y"
{ expr = ValueStack[ValueStack.Depth-1]; }
        break;
      case 4: // expr -> expr, TOKEN_AND, expr
#line 30 "parser.y"
{ CurrentSemanticValue = new And(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 5: // expr -> expr, TOKEN_OR, expr
#line 31 "parser.y"
{ CurrentSemanticValue = new Or(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 6: // expr -> TOKEN_NOT, expr
#line 32 "parser.y"
{ CurrentSemanticValue = new Not(ValueStack[ValueStack.Depth-1]); }
        break;
      case 7: // expr -> TOKEN_LPAREN, expr, TOKEN_RPAREN
#line 33 "parser.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
